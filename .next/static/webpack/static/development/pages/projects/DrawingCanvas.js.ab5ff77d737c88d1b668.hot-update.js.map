{"version":3,"file":"static/webpack/static/development/pages/projects/DrawingCanvas.js.ab5ff77d737c88d1b668.hot-update.js","sources":["webpack:///./pages/projects/DrawingCanvas.js"],"sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\nimport SignatureCanvas from 'react-signature-canvas'\nimport ImageProcessor from './ImageProcessor'\n\n\nexport default function DrawingCanvas(){\n  // useStates\n  const sigCanvas = useRef({});\n  const [imageURL, setImageURL] = useState(null);\n  const [resultArray, setResultArray] = useState(null);\n  const [height, setHeight] = useState(null)\n  const [width, setWidth] = useState(null)\n  // Canvas Configuration\n\n  if (process.browser) {\n    useEffect(() => setHeight(document.children[0].clientHeight), [document.children[0].clientHeight])\n    useEffect(() => setWidth(document.children[0].clientWidth), [document.children[0].clientWidth])\n  }\n  const canvasWidth =  Math.min(height, width)/2;\n  const brushSize = (canvasWidth/30).toString(10);\n\n  // Functions\n  const clearPad = () => {\n    sigCanvas.current.clear();\n    setImageURL(null);\n    setResultArray(null);\n  };\n  const submitPad = () => {\n    let submittedImage = sigCanvas.current.getTrimmedCanvas();\n    let result = ImageProcessor(submittedImage)\n    apiCall(result[1]);\n    setImageURL(result[0].toDataURL(\"image/png\"));\n  };\n\n  // Query our AI model\n  const apiCall = (image_array) => {\n    const model_url = 'http://54.197.197.40/v1/models/digit_model:predict';\n    var xhr = new XMLHttpRequest();\n    // get a callback when the server responds\n    xhr.addEventListener('load', () => {\n      // Get results and process\n      let reponse = JSON.parse(xhr.responseText);\n      processResult(reponse)\n    });\n    xhr.open('POST', model_url);\n    xhr.send(JSON.stringify({ \"instances\": image_array }));\n  }\n\n  const processResult = (reponse) => {\n    let unsorted_array = reponse[\"predictions\"][0];\n    let sorted_array = Array(unsorted_array.length);\n    // Get all results above 0.00%\n    for (var i = 0; i< unsorted_array.length; i++){\n      let index = unsorted_array.indexOf(Math.max(...unsorted_array));\n      let confidence = (unsorted_array[index]*100).toFixed(2)\n      if (confidence > 0){\n        sorted_array[i] = [index, confidence];\n        unsorted_array[index] = 0;\n      }\n    }\n    setResultArray(sorted_array);\n  }\n\n  const result_graph = (resultArray) => {\n    return(<div>\n      {resultArray.map((result, index) => (\n        <p key={index}>Number: {result[0]} <br/>Confidence: {result[1]}%</p>\n    ))}\n    </div>\n    )\n  }\n\n  return(\n    <div>\n      <SignatureCanvas\n            ref = {sigCanvas}\n            penColor='black'\n            velocityFilterWeight='0'\n            maxWidth= {brushSize}\n            dotSize='0'\n            canvasProps={{\n              width: canvasWidth,\n              height: canvasWidth,\n              className: 'signatureCanvas'\n            }} />\n      <div className=\"button-wrapper\">\n        <button className=\"button\" onClick={clearPad}>clear</button>\n        <button className=\"button\" onClick={submitPad}>submit</button>\n      </div>\n      {resultArray ? (\n        <>\n          <a>Your result: </a>\n          <a>{result_graph(resultArray)}</a>\n        </>\n      ) : null}\n\n      {imageURL ? (\n        <>\n          <a>Processed Digit</a>\n          <img\n            src={imageURL}\n            alt=\"my signature\"\n            style={{\n              display: \"block\",\n              margin: \"0 auto\",\n              border: \"1px solid black\",\n              width: \"150px\"\n            }}\n          />\n        </>\n      ) : null}\n    </div>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;;;;A","sourceRoot":""}