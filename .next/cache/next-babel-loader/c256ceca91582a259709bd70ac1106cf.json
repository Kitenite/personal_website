{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef, useEffect } from 'react';\nimport SignatureCanvas from 'react-signature-canvas';\nimport ImageProcessor from './ImageProcessor';\nexport default function DrawingCanvas() {\n  // useStates\n  const sigCanvas = useRef({});\n  const {\n    0: imageURL,\n    1: setImageURL\n  } = useState(null);\n  const {\n    0: resultArray,\n    1: setResultArray\n  } = useState(null);\n  const {\n    0: height,\n    1: setHeight\n  } = useState(null);\n  const {\n    0: width,\n    1: setWidth\n  } = useState(null); // Canvas Configuration\n\n  if (false) {\n    useEffect(() => setHeight(document.children[0].clientHeight), [document.children[0].clientHeight]);\n    useEffect(() => setWidth(document.children[0].clientWidth), [document.children[0].clientWidth]);\n  }\n\n  const canvasWidth = Math.min(height, width) / 2;\n  const brushSize = (canvasWidth / 30).toString(10); // Functions\n\n  const clearPad = () => {\n    sigCanvas.current.clear();\n    setImageURL(null);\n    setResultArray(null);\n  };\n\n  const submitPad = () => {\n    let submittedImage = sigCanvas.current.getTrimmedCanvas();\n    let result = ImageProcessor(submittedImage);\n    apiCall(result[1]);\n    setImageURL(result[0].toDataURL(\"image/png\"));\n  }; // Query our AI model\n\n\n  const apiCall = image_array => {\n    const model_url = '/api/v1/models/digit_model:predict';\n    var xhr = new XMLHttpRequest();\n    xhr.withCredentials = false; // get a callback when the server responds\n\n    xhr.addEventListener('load', () => {\n      // Get results and process\n      if (xhr.responseText) {\n        let reponse = JSON.parse(xhr.responseText);\n        processResult(reponse);\n      }\n    });\n    xhr.open('POST', model_url);\n    xhr.send(_JSON$stringify({\n      \"instances\": image_array\n    }));\n  };\n\n  const processResult = reponse => {\n    let unsorted_array = reponse[\"predictions\"][0];\n    let sorted_array = Array(unsorted_array.length); // Get all results above 0.00%\n\n    for (var i = 0; i < unsorted_array.length; i++) {\n      let index = unsorted_array.indexOf(Math.max(...unsorted_array));\n      let confidence = (unsorted_array[index] * 100).toFixed(2);\n\n      if (confidence > 0) {\n        sorted_array[i] = [index, confidence];\n        unsorted_array[index] = 0;\n      }\n    }\n\n    setResultArray(sorted_array);\n  };\n\n  const result_graph = resultArray => {\n    return __jsx(\"div\", null, resultArray.map((result, index) => __jsx(\"p\", {\n      key: index\n    }, \"Number: \", result[0], \" \", __jsx(\"br\", null), \"Confidence: \", result[1], \"%\")));\n  };\n\n  return __jsx(\"div\", null, __jsx(SignatureCanvas, {\n    ref: sigCanvas,\n    penColor: \"black\",\n    velocityFilterWeight: \"0\",\n    maxWidth: brushSize,\n    dotSize: \"0\",\n    canvasProps: {\n      width: canvasWidth,\n      height: canvasWidth,\n      className: 'signatureCanvas'\n    }\n  }), __jsx(\"div\", {\n    className: \"button-wrapper\"\n  }, __jsx(\"button\", {\n    className: \"button\",\n    onClick: clearPad\n  }, \"clear\"), __jsx(\"button\", {\n    className: \"button\",\n    onClick: submitPad\n  }, \"submit\")), resultArray ? __jsx(React.Fragment, null, __jsx(\"a\", null, \"Your result: \"), __jsx(\"a\", null, result_graph(resultArray))) : null, imageURL ? __jsx(React.Fragment, null, __jsx(\"a\", null, \"Processed Digit\"), __jsx(\"img\", {\n    src: imageURL,\n    alt: \"my signature\",\n    style: {\n      display: \"block\",\n      margin: \"0 auto\",\n      border: \"1px solid black\",\n      width: \"150px\"\n    }\n  })) : null);\n}","map":null,"metadata":{},"sourceType":"module"}