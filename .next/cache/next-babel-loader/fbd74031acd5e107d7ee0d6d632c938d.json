{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef, useEffect } from 'react';\nimport SignatureCanvas from 'react-signature-canvas';\nimport ImageProcessor from './ImageProcessor';\nexport default function DrawingCanvas() {\n  // useStates\n  const sigCanvas = useRef({});\n  const {\n    0: imageURL,\n    1: setImageURL\n  } = useState(null);\n  const {\n    0: resultArray,\n    1: setResultArray\n  } = useState(null);\n  const {\n    0: height,\n    1: setHeight\n  } = useState(null);\n  const {\n    0: width,\n    1: setWidth\n  } = useState(null); // Canvas Configuration\n\n  if (false) {\n    useEffect(() => setHeight(document.children[0].clientHeight), [document.children[0].clientHeight]);\n    useEffect(() => setWidth(document.children[0].clientWidth), [document.children[0].clientWidth]);\n  }\n\n  const canvasWidth = Math.min(height, width) / 2;\n  const brushSize = (canvasWidth / 30).toString(10); // Functions\n\n  const clearPad = () => {\n    sigCanvas.current.clear();\n    setImageURL(null);\n    setResultArray(null);\n  };\n\n  const submitPad = () => {\n    const blank_canvas = document.createElement('canvas');\n    let submittedImage = sigCanvas.current.getTrimmedCanvas();\n    let result = ImageProcessor(submittedImage, blank_canvas);\n    apiCall(result[1]);\n    setImageURL(result[0].toDataURL(\"image/png\"));\n  }; // Query our AI model\n\n\n  const apiCall = image_array => {\n    const model_url = '/api/v1/models/digit_model:predict';\n    var xhr = new XMLHttpRequest();\n    xhr.withCredentials = false; // get a callback when the server responds\n\n    xhr.addEventListener('load', () => {\n      // Get results and process\n      if (xhr.responseText) {\n        let reponse = JSON.parse(xhr.responseText);\n        processResult(reponse);\n      }\n    });\n    xhr.open('POST', model_url);\n    xhr.send(_JSON$stringify({\n      \"instances\": image_array\n    }));\n  };\n\n  const processResult = reponse => {\n    let unsorted_array = reponse[\"predictions\"][0];\n    let sorted_array = Array(unsorted_array.length); // Get all results above 0.00%\n\n    for (var i = 0; i < unsorted_array.length; i++) {\n      let index = unsorted_array.indexOf(Math.max(...unsorted_array));\n      let confidence = (unsorted_array[index] * 100).toFixed(2);\n\n      if (confidence > 0) {\n        sorted_array[i] = [index, confidence];\n        unsorted_array[index] = 0;\n      }\n    }\n\n    setResultArray(sorted_array);\n  };\n\n  const result_graph = resultArray => {\n    return __jsx(\"div\", null, resultArray.map((result, index) => __jsx(\"p\", {\n      key: index\n    }, \"Number: \", result[0], \" \", __jsx(\"br\", null), \"Confidence: \", result[1], \"%\")));\n  };\n\n  return __jsx(\"div\", null, __jsx(SignatureCanvas, {\n    ref: sigCanvas,\n    penColor: \"black\",\n    velocityFilterWeight: \"0\",\n    maxWidth: brushSize,\n    dotSize: \"0\",\n    canvasProps: {\n      width: canvasWidth,\n      height: canvasWidth,\n      className: 'signatureCanvas'\n    }\n  }), __jsx(\"div\", {\n    className: \"button-wrapper\"\n  }, __jsx(\"button\", {\n    className: \"button\",\n    onClick: clearPad\n  }, \"clear\"), __jsx(\"button\", {\n    className: \"button\",\n    onClick: submitPad\n  }, \"submit\")), resultArray ? __jsx(React.Fragment, null, __jsx(\"a\", null, \"Your result: \"), __jsx(\"a\", null, result_graph(resultArray))) : null, imageURL ? __jsx(React.Fragment, null, __jsx(\"a\", null, \"Processed Digit\"), __jsx(\"img\", {\n    src: imageURL,\n    alt: \"my signature\",\n    style: {\n      display: \"block\",\n      margin: \"0 auto\",\n      border: \"1px solid black\",\n      width: \"150px\"\n    }\n  })) : null);\n}","map":{"version":3,"sources":["/Users/kietho/Repos/stuffbykiet.com/pages/projects/components/DrawingCanvas.js"],"names":["useState","useRef","useEffect","SignatureCanvas","ImageProcessor","DrawingCanvas","sigCanvas","imageURL","setImageURL","resultArray","setResultArray","height","setHeight","width","setWidth","document","children","clientHeight","clientWidth","canvasWidth","Math","min","brushSize","toString","clearPad","current","clear","submitPad","blank_canvas","createElement","submittedImage","getTrimmedCanvas","result","apiCall","toDataURL","image_array","model_url","xhr","XMLHttpRequest","withCredentials","addEventListener","responseText","reponse","JSON","parse","processResult","open","send","unsorted_array","sorted_array","Array","length","i","index","indexOf","max","confidence","toFixed","result_graph","map","className","display","margin","border"],"mappings":"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","sourcesContent":["import {useState, useRef, useEffect} from 'react';\nimport SignatureCanvas from 'react-signature-canvas'\nimport ImageProcessor from './ImageProcessor'\n\nexport default function DrawingCanvas(){\n  // useStates\n  const sigCanvas = useRef({});\n  const [imageURL, setImageURL] = useState(null);\n  const [resultArray, setResultArray] = useState(null);\n  const [height, setHeight] = useState(null)\n  const [width, setWidth] = useState(null)\n  // Canvas Configuration\n\n  if (process.browser) {\n    useEffect(() => setHeight(document.children[0].clientHeight), [document.children[0].clientHeight])\n    useEffect(() => setWidth(document.children[0].clientWidth), [document.children[0].clientWidth])\n  }\n  const canvasWidth =  Math.min(height, width)/2;\n  const brushSize = (canvasWidth/30).toString(10);\n\n  // Functions\n  const clearPad = () => {\n    sigCanvas.current.clear();\n    setImageURL(null);\n    setResultArray(null);\n  };\n  const submitPad = () => {\n    const blank_canvas = document.createElement('canvas');\n    let submittedImage = sigCanvas.current.getTrimmedCanvas();\n    let result = ImageProcessor(submittedImage, blank_canvas)\n    apiCall(result[1]);\n    setImageURL(result[0].toDataURL(\"image/png\"));\n  };\n\n  // Query our AI model\n  const apiCall = (image_array) => {\n    const model_url = '/api/v1/models/digit_model:predict';\n    var xhr = new XMLHttpRequest();\n    xhr.withCredentials = false;\n    // get a callback when the server responds\n    xhr.addEventListener('load', () => {\n      // Get results and process\n      if (xhr.responseText){\n        let reponse = JSON.parse(xhr.responseText);\n        processResult(reponse)\n      }\n    });\n    xhr.open('POST', model_url);\n    xhr.send(JSON.stringify({ \"instances\": image_array }));\n  }\n\n  const processResult = (reponse) => {\n    let unsorted_array = reponse[\"predictions\"][0];\n    let sorted_array = Array(unsorted_array.length);\n    // Get all results above 0.00%\n    for (var i = 0; i< unsorted_array.length; i++){\n      let index = unsorted_array.indexOf(Math.max(...unsorted_array));\n      let confidence = (unsorted_array[index]*100).toFixed(2)\n      if (confidence > 0){\n        sorted_array[i] = [index, confidence];\n        unsorted_array[index] = 0;\n      }\n    }\n    setResultArray(sorted_array);\n  }\n\n  const result_graph = (resultArray) => {\n    return(<div>\n      {resultArray.map((result, index) => (\n        <p key={index}>Number: {result[0]} <br/>Confidence: {result[1]}%</p>\n    ))}\n    </div>\n    )\n  }\n\n  return(\n    <div>\n      <SignatureCanvas\n            ref = {sigCanvas}\n            penColor='black'\n            velocityFilterWeight='0'\n            maxWidth= {brushSize}\n            dotSize='0'\n            canvasProps={{\n              width: canvasWidth,\n              height: canvasWidth,\n              className: 'signatureCanvas'\n            }} />\n      <div className=\"button-wrapper\">\n        <button className=\"button\" onClick={clearPad}>clear</button>\n        <button className=\"button\" onClick={submitPad}>submit</button>\n      </div>\n      {resultArray ? (\n        <>\n          <a>Your result: </a>\n          <a>{result_graph(resultArray)}</a>\n        </>\n      ) : null}\n\n      {imageURL ? (\n        <>\n          <a>Processed Digit</a>\n          <img\n            src={imageURL}\n            alt=\"my signature\"\n            style={{\n              display: \"block\",\n              margin: \"0 auto\",\n              border: \"1px solid black\",\n              width: \"150px\"\n            }}\n          />\n        </>\n      ) : null}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}