{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useEffect } from 'react';\nimport SignatureCanvas from 'react-signature-canvas';\nimport ImageProcessor from './ImageProcessor';\nexport default function DrawingCanvas() {\n  // useStates\n  var sigCanvas = useRef({});\n\n  var _useState = useState(null),\n      imageURL = _useState[0],\n      setImageURL = _useState[1];\n\n  var _useState2 = useState(null),\n      resultArray = _useState2[0],\n      setResultArray = _useState2[1];\n\n  var _useState3 = useState(null),\n      height = _useState3[0],\n      setHeight = _useState3[1];\n\n  var _useState4 = useState(null),\n      width = _useState4[0],\n      setWidth = _useState4[1]; // Canvas Configuration\n\n\n  if (true) {\n    useEffect(function () {\n      return setHeight(document.children[0].clientHeight);\n    }, [document.children[0].clientHeight]);\n    useEffect(function () {\n      return setWidth(document.children[0].clientWidth);\n    }, [document.children[0].clientWidth]);\n  }\n\n  var canvasWidth = Math.min(height, width) / 2;\n  var brushSize = (canvasWidth / 30).toString(10); // Functions\n\n  var clearPad = function clearPad() {\n    sigCanvas.current.clear();\n    setImageURL(null);\n    setResultArray(null);\n  };\n\n  var submitPad = function submitPad() {\n    var submittedImage = sigCanvas.current.getTrimmedCanvas();\n    var result = ImageProcessor(submittedImage);\n    apiCall(result[1]);\n    setImageURL(result[0].toDataURL(\"image/png\"));\n  }; // Query our AI model\n\n\n  var apiCall = function apiCall(image_array) {\n    var model_url = '/api/v1/models/digit_model:predict';\n    var xhr = new XMLHttpRequest();\n    xhr.withCredentials = false; // get a callback when the server responds\n\n    xhr.addEventListener('load', function () {\n      // Get results and process\n      if (xhr.responseText) {\n        var reponse = JSON.parse(xhr.responseText);\n        processResult(reponse);\n      }\n    });\n    xhr.open('POST', model_url);\n    xhr.send(_JSON$stringify({\n      \"instances\": image_array\n    }));\n  };\n\n  var processResult = function processResult(reponse) {\n    var unsorted_array = reponse[\"predictions\"][0];\n    var sorted_array = Array(unsorted_array.length); // Get all results above 0.00%\n\n    for (var i = 0; i < unsorted_array.length; i++) {\n      var index = unsorted_array.indexOf(Math.max.apply(Math, _toConsumableArray(unsorted_array)));\n      var confidence = (unsorted_array[index] * 100).toFixed(2);\n\n      if (confidence > 0) {\n        sorted_array[i] = [index, confidence];\n        unsorted_array[index] = 0;\n      }\n    }\n\n    setResultArray(sorted_array);\n  };\n\n  var result_graph = function result_graph(resultArray) {\n    return __jsx(\"div\", null, resultArray.map(function (result, index) {\n      return __jsx(\"p\", {\n        key: index\n      }, \"Number: \", result[0], \" \", __jsx(\"br\", null), \"Confidence: \", result[1], \"%\");\n    }));\n  };\n\n  return __jsx(\"div\", null, __jsx(SignatureCanvas, {\n    ref: sigCanvas,\n    penColor: \"black\",\n    velocityFilterWeight: \"0\",\n    maxWidth: brushSize,\n    dotSize: \"0\",\n    canvasProps: {\n      width: canvasWidth,\n      height: canvasWidth,\n      className: 'signatureCanvas'\n    }\n  }), __jsx(\"div\", {\n    className: \"button-wrapper\"\n  }, __jsx(\"button\", {\n    className: \"button\",\n    onClick: clearPad\n  }, \"clear\"), __jsx(\"button\", {\n    className: \"button\",\n    onClick: submitPad\n  }, \"submit\")), resultArray ? __jsx(React.Fragment, null, __jsx(\"a\", null, \"Your result: \"), __jsx(\"a\", null, result_graph(resultArray))) : null, imageURL ? __jsx(React.Fragment, null, __jsx(\"a\", null, \"Processed Digit\"), __jsx(\"img\", {\n    src: imageURL,\n    alt: \"my signature\",\n    style: {\n      display: \"block\",\n      margin: \"0 auto\",\n      border: \"1px solid black\",\n      width: \"150px\"\n    }\n  })) : null);\n}","map":null,"metadata":{},"sourceType":"module"}