{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/kietho/Repos/stuffbykiet.com/pages/projects/components/DrawingCanvas.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useEffect } from 'react';\nimport SignatureCanvas from 'react-signature-canvas';\nimport ImageProcessor from './ImageProcessor';\nimport axios from 'axios';\nexport default function DrawingCanvas() {\n  // useStates\n  var sigCanvas = useRef({});\n\n  var _useState = useState(null),\n      imageURL = _useState[0],\n      setImageURL = _useState[1];\n\n  var _useState2 = useState(null),\n      resultArray = _useState2[0],\n      setResultArray = _useState2[1];\n\n  var _useState3 = useState(null),\n      height = _useState3[0],\n      setHeight = _useState3[1];\n\n  var _useState4 = useState(null),\n      width = _useState4[0],\n      setWidth = _useState4[1]; // Canvas Configuration\n\n\n  if (true) {\n    useEffect(function () {\n      return setHeight(document.children[0].clientHeight);\n    }, [document.children[0].clientHeight]);\n    useEffect(function () {\n      return setWidth(document.children[0].clientWidth);\n    }, [document.children[0].clientWidth]);\n  }\n\n  var canvasWidth = Math.min(height, width) / 2;\n  var brushSize = (canvasWidth / 30).toString(10); // Functions\n\n  var clearPad = function clearPad() {\n    sigCanvas.current.clear();\n    setImageURL(null);\n    setResultArray(null);\n  };\n\n  var submitPad = function submitPad() {\n    var submittedImage = sigCanvas.current.getTrimmedCanvas();\n    var result = ImageProcessor(submittedImage);\n    apiCall(result[1]);\n    setImageURL(result[0].toDataURL(\"image/png\"));\n  }; // Query our AI model\n\n\n  function apiCall(image_array) {\n    var model_url, response, parsed_response;\n    return _regeneratorRuntime.async(function apiCall$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            model_url = 'http://54.197.197.40/v1/models/digit_model:predict';\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.post(model_url, {\n              instances: image_array\n            }, {\n              headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*'\n              }\n            }));\n\n          case 3:\n            response = _context.sent;\n            parsed_response = JSON.parse(response);\n            processResult(parsed_response);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  var processResult = function processResult(reponse) {\n    var unsorted_array = reponse[\"predictions\"][0];\n    var sorted_array = Array(unsorted_array.length); // Get all results above 0.00%\n\n    for (var i = 0; i < unsorted_array.length; i++) {\n      var index = unsorted_array.indexOf(Math.max.apply(Math, _toConsumableArray(unsorted_array)));\n      var confidence = (unsorted_array[index] * 100).toFixed(2);\n\n      if (confidence > 0) {\n        sorted_array[i] = [index, confidence];\n        unsorted_array[index] = 0;\n      }\n    }\n\n    setResultArray(sorted_array);\n  };\n\n  var result_graph = function result_graph(resultArray) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, resultArray.map(function (result, index) {\n      return __jsx(\"p\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Number: \", result[0], \" \", __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), \"Confidence: \", result[1], \"%\");\n    }));\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(SignatureCanvas, {\n    ref: sigCanvas,\n    penColor: \"black\",\n    velocityFilterWeight: \"0\",\n    maxWidth: brushSize,\n    dotSize: \"0\",\n    canvasProps: {\n      width: canvasWidth,\n      height: canvasWidth,\n      className: 'signatureCanvas'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"button-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    className: \"button\",\n    onClick: clearPad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"clear\"), __jsx(\"button\", {\n    className: \"button\",\n    onClick: submitPad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"submit\")), resultArray ? __jsx(React.Fragment, null, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Your result: \"), __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, result_graph(resultArray))) : null, imageURL ? __jsx(React.Fragment, null, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Processed Digit\"), __jsx(\"img\", {\n    src: imageURL,\n    alt: \"my signature\",\n    style: {\n      display: \"block\",\n      margin: \"0 auto\",\n      border: \"1px solid black\",\n      width: \"150px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })) : null);\n}","map":{"version":3,"sources":["/Users/kietho/Repos/stuffbykiet.com/pages/projects/components/DrawingCanvas.js"],"names":["React","useState","useRef","useEffect","SignatureCanvas","ImageProcessor","axios","DrawingCanvas","sigCanvas","imageURL","setImageURL","resultArray","setResultArray","height","setHeight","width","setWidth","document","children","clientHeight","clientWidth","canvasWidth","Math","min","brushSize","toString","clearPad","current","clear","submitPad","submittedImage","getTrimmedCanvas","result","apiCall","toDataURL","image_array","model_url","post","instances","headers","response","parsed_response","JSON","parse","processResult","reponse","unsorted_array","sorted_array","Array","length","i","index","indexOf","max","confidence","toFixed","result_graph","map","className","display","margin","border"],"mappings":"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","sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\nimport SignatureCanvas from 'react-signature-canvas'\nimport ImageProcessor from './ImageProcessor'\nimport axios from 'axios'\n\n\nexport default function DrawingCanvas(){\n  // useStates\n  const sigCanvas = useRef({});\n  const [imageURL, setImageURL] = useState(null);\n  const [resultArray, setResultArray] = useState(null);\n  const [height, setHeight] = useState(null)\n  const [width, setWidth] = useState(null)\n  // Canvas Configuration\n\n  if (process.browser) {\n    useEffect(() => setHeight(document.children[0].clientHeight), [document.children[0].clientHeight])\n    useEffect(() => setWidth(document.children[0].clientWidth), [document.children[0].clientWidth])\n  }\n  const canvasWidth =  Math.min(height, width)/2;\n  const brushSize = (canvasWidth/30).toString(10);\n\n  // Functions\n  const clearPad = () => {\n    sigCanvas.current.clear();\n    setImageURL(null);\n    setResultArray(null);\n  };\n  const submitPad = () => {\n    let submittedImage = sigCanvas.current.getTrimmedCanvas();\n    let result = ImageProcessor(submittedImage)\n    apiCall(result[1]);\n    setImageURL(result[0].toDataURL(\"image/png\"));\n  };\n\n  // Query our AI model\n  async function apiCall(image_array){\n    const model_url = 'http://54.197.197.40/v1/models/digit_model:predict';\n    const response = await axios.post(model_url,\n    { instances: image_array},\n    { headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    }})\n    let parsed_response = JSON.parse(response)\n    processResult(parsed_response)\n  }\n\n  const processResult = (reponse) => {\n    let unsorted_array = reponse[\"predictions\"][0];\n    let sorted_array = Array(unsorted_array.length);\n    // Get all results above 0.00%\n    for (var i = 0; i< unsorted_array.length; i++){\n      let index = unsorted_array.indexOf(Math.max(...unsorted_array));\n      let confidence = (unsorted_array[index]*100).toFixed(2)\n      if (confidence > 0){\n        sorted_array[i] = [index, confidence];\n        unsorted_array[index] = 0;\n      }\n    }\n    setResultArray(sorted_array);\n  }\n\n  const result_graph = (resultArray) => {\n    return(<div>\n      {resultArray.map((result, index) => (\n        <p key={index}>Number: {result[0]} <br/>Confidence: {result[1]}%</p>\n    ))}\n    </div>\n    )\n  }\n\n  return(\n    <div>\n      <SignatureCanvas\n            ref = {sigCanvas}\n            penColor='black'\n            velocityFilterWeight='0'\n            maxWidth= {brushSize}\n            dotSize='0'\n            canvasProps={{\n              width: canvasWidth,\n              height: canvasWidth,\n              className: 'signatureCanvas'\n            }} />\n      <div className=\"button-wrapper\">\n        <button className=\"button\" onClick={clearPad}>clear</button>\n        <button className=\"button\" onClick={submitPad}>submit</button>\n      </div>\n      {resultArray ? (\n        <>\n          <a>Your result: </a>\n          <a>{result_graph(resultArray)}</a>\n        </>\n      ) : null}\n\n      {imageURL ? (\n        <>\n          <a>Processed Digit</a>\n          <img\n            src={imageURL}\n            alt=\"my signature\"\n            style={{\n              display: \"block\",\n              margin: \"0 auto\",\n              border: \"1px solid black\",\n              width: \"150px\"\n            }}\n          />\n        </>\n      ) : null}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}