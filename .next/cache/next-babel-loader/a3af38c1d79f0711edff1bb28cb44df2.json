{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef, useEffect } from 'react';\nimport SignatureCanvas from 'react-signature-canvas';\nimport Button from '../../../components/Button';\nimport ResultGraph from './ResultGraph';\nexport default function DrawingCanvas() {\n  // useStates\n  var sigCanvas = useRef({});\n\n  var _useState = useState(null),\n      imageURL = _useState[0],\n      setImageURL = _useState[1];\n\n  var _useState2 = useState(null),\n      resultArray = _useState2[0],\n      setResultArray = _useState2[1];\n\n  var _useState3 = useState(null),\n      height = _useState3[0],\n      setHeight = _useState3[1];\n\n  var _useState4 = useState(null),\n      width = _useState4[0],\n      setWidth = _useState4[1]; // Canvas Configuration\n\n\n  if (true) {\n    useEffect(function () {\n      return setHeight(document.children[0].clientHeight);\n    }, [document.children[0].clientHeight]);\n    useEffect(function () {\n      return setWidth(document.children[0].clientWidth);\n    }, [document.children[0].clientWidth]);\n  }\n\n  var canvasWidth = Math.min(height, width) / 2;\n  var brushSize = (canvasWidth / 30).toString(10); // Functions\n\n  var clearPad = function clearPad() {\n    sigCanvas.current.clear();\n    setImageURL(null);\n    setResultArray(null);\n  };\n\n  var submitPad = function submitPad() {\n    var submittedImage = sigCanvas.current.getTrimmedCanvas();\n    var result = processImage(submittedImage);\n    apiCall(result[1]);\n    setImageURL(result[0].toDataURL(\"image/png\"));\n  }; // Query our AI model\n\n\n  var apiCall = function apiCall(image_array) {\n    var model_url = '/api/v1/models/digit_model:predict';\n    var xhr = new XMLHttpRequest();\n    xhr.withCredentials = false; // get a callback when the server responds\n\n    xhr.addEventListener('load', function () {\n      // Get results and process\n      console.log(xhr.status);\n\n      if (xhr.responseText) {\n        var reponse = JSON.parse(xhr.responseText);\n        processResult(reponse);\n      }\n    });\n    xhr.open('POST', model_url);\n    xhr.send(_JSON$stringify({\n      \"instances\": image_array\n    }));\n  };\n\n  var processResult = function processResult(reponse) {\n    var unsorted_array = reponse[\"predictions\"][0];\n    var sorted_array = Array(unsorted_array.length); // Get all results above 0.00%\n\n    for (var i = 0; i < unsorted_array.length; i++) {\n      var index = unsorted_array.indexOf(Math.max.apply(Math, _toConsumableArray(unsorted_array)));\n      var confidence = (unsorted_array[index] * 100).toFixed(2);\n\n      if (confidence > 1) {\n        sorted_array[i] = [index, confidence];\n        unsorted_array[index] = 0;\n      }\n    }\n\n    setResultArray(sorted_array);\n  };\n\n  var processImage = function processImage(img) {\n    // Scale image\n    var canvas = document.createElement('canvas');\n    var scale = Math.min(20 / img.width, 20 / img.height);\n    canvas.width = 28;\n    canvas.height = 28;\n    var cctx = canvas.getContext('2d');\n    cctx.imageSmoothingEnabled = true;\n    var scaled_width = img.width * scale;\n    var scaled_height = img.height * scale;\n    var dx = (28 - scaled_width) / 2;\n    var dy = (28 - scaled_height) / 2;\n    cctx.drawImage(img, dx, dy, scaled_width, scaled_height); // Turn into 2D array of 28x28\n\n    var image_array = Array(28);\n    var column_count = 0;\n    var row_count = 0;\n    var column_array = Array(28); // invert colors, make black and white and remove alpha\n\n    var imgData = cctx.getImageData(0, 0, canvas.width, canvas.height);\n    var i;\n\n    for (i = 0; i < imgData.data.length; i += 4) {\n      // Fill array\n      if (column_count >= 28) {\n        column_count = 0;\n        image_array[row_count] = column_array; // Reset column_array\n\n        column_array = Array(28);\n        row_count++;\n      }\n\n      if (imgData.data[i + 3] > 0) {\n        // Used to visualize image for debugging, can be discarded\n        imgData.data[i] = 255;\n        imgData.data[i + 1] = 255;\n        imgData.data[i + 2] = 255; // Convert to either 0 or 1\n\n        column_array[column_count] = 1;\n      } else {\n        // Used to visualize image for debugging, can be discarded\n        imgData.data[i] = 0;\n        imgData.data[i + 1] = 0;\n        imgData.data[i + 2] = 0; // Convert to either 0 or 1\n\n        column_array[column_count] = 0;\n      }\n\n      imgData.data[i + 3] = 255;\n      column_count++;\n    } // Lazy add final row empty\n\n\n    var final_row = Array(28);\n\n    for (var i = 0; i < final_row.length; i++) {\n      final_row[i] = 0;\n    }\n\n    image_array[27] = final_row;\n    cctx.putImageData(imgData, 0, 0);\n    var newImage = canvas;\n    return [newImage, image_array];\n  };\n\n  var result_graph = function result_graph(resultArray) {\n    return __jsx(ResultGraph, {\n      result: resultArray\n    });\n  };\n\n  return __jsx(\"div\", null, __jsx(SignatureCanvas, {\n    ref: sigCanvas,\n    penColor: \"black\",\n    velocityFilterWeight: \"0\",\n    maxWidth: brushSize,\n    dotSize: \"0\",\n    canvasProps: {\n      width: canvasWidth,\n      height: canvasWidth,\n      className: 'signatureCanvas'\n    }\n  }), __jsx(\"div\", {\n    className: \"button-wrapper\"\n  }, __jsx(Button, {\n    className: \"button\",\n    onClick: clearPad,\n    isClear: \"true\"\n  }, \"clear\"), __jsx(Button, {\n    className: \"button\",\n    onClick: submitPad\n  }, \"submit\")), resultArray ? __jsx(\"div\", null, result_graph(resultArray)) : null, imageURL ? __jsx(React.Fragment, null, __jsx(\"p\", null, \"Processed Digit\"), __jsx(\"img\", {\n    src: imageURL,\n    alt: \"my signature\",\n    style: {\n      display: \"block\",\n      margin: \"0 auto\",\n      border: \"1px solid black\",\n      width: \"150px\"\n    }\n  })) : null);\n}","map":{"version":3,"sources":["/Users/kietho/Repos/stuffbykiet.com/pages/projects/components/DrawingCanvas.js"],"names":["useState","useRef","useEffect","SignatureCanvas","Button","ResultGraph","DrawingCanvas","sigCanvas","imageURL","setImageURL","resultArray","setResultArray","height","setHeight","width","setWidth","document","children","clientHeight","clientWidth","canvasWidth","Math","min","brushSize","toString","clearPad","current","clear","submitPad","submittedImage","getTrimmedCanvas","result","processImage","apiCall","toDataURL","image_array","model_url","xhr","XMLHttpRequest","withCredentials","addEventListener","console","log","status","responseText","reponse","JSON","parse","processResult","open","send","unsorted_array","sorted_array","Array","length","i","index","indexOf","max","confidence","toFixed","img","canvas","createElement","scale","cctx","getContext","imageSmoothingEnabled","scaled_width","scaled_height","dx","dy","drawImage","column_count","row_count","column_array","imgData","getImageData","data","final_row","putImageData","newImage","result_graph","className","display","margin","border"],"mappings":"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","sourcesContent":["import {useState, useRef, useEffect} from 'react';\nimport SignatureCanvas from 'react-signature-canvas'\nimport Button from '../../../components/Button';\nimport ResultGraph from './ResultGraph'\n\n\nexport default function DrawingCanvas(){\n  // useStates\n  const sigCanvas = useRef({});\n  const [imageURL, setImageURL] = useState(null);\n  const [resultArray, setResultArray] = useState(null);\n  const [height, setHeight] = useState(null)\n  const [width, setWidth] = useState(null)\n  // Canvas Configuration\n\n  if (process.browser) {\n    useEffect(() => setHeight(document.children[0].clientHeight), [document.children[0].clientHeight])\n    useEffect(() => setWidth(document.children[0].clientWidth), [document.children[0].clientWidth])\n  }\n  const canvasWidth =  Math.min(height, width)/2;\n  const brushSize = (canvasWidth/30).toString(10);\n\n  // Functions\n  const clearPad = () => {\n    sigCanvas.current.clear();\n    setImageURL(null);\n    setResultArray(null);\n  };\n  const submitPad = () => {\n    let submittedImage = sigCanvas.current.getTrimmedCanvas();\n    let result = processImage(submittedImage)\n    apiCall(result[1]);\n    setImageURL(result[0].toDataURL(\"image/png\"));\n  };\n\n  // Query our AI model\n  const apiCall = (image_array) => {\n    const model_url = '/api/v1/models/digit_model:predict';\n    var xhr = new XMLHttpRequest();\n    xhr.withCredentials = false;\n    // get a callback when the server responds\n    xhr.addEventListener('load', () => {\n      // Get results and process\n      console.log(xhr.status)\n      if (xhr.responseText){\n        let reponse = JSON.parse(xhr.responseText);\n        processResult(reponse)\n      }\n    });\n    xhr.open('POST', model_url);\n    xhr.send(JSON.stringify({ \"instances\": image_array }));\n  }\n\n  const processResult = (reponse) => {\n    let unsorted_array = reponse[\"predictions\"][0];\n    let sorted_array = Array(unsorted_array.length);\n    // Get all results above 0.00%\n    for (var i = 0; i< unsorted_array.length; i++){\n      let index = unsorted_array.indexOf(Math.max(...unsorted_array));\n      let confidence = (unsorted_array[index]*100).toFixed(2)\n      if (confidence > 1){\n        sorted_array[i] = [index, confidence];\n        unsorted_array[index] = 0;\n      }\n    }\n    setResultArray(sorted_array);\n  }\n  const processImage = (img) => {\n    // Scale image\n    const canvas =document.createElement('canvas');\n    const scale = Math.min(20/img.width, 20/img.height);\n    canvas.width = 28;\n    canvas.height = 28;\n    const cctx = canvas.getContext('2d');\n    cctx.imageSmoothingEnabled = true;\n    const scaled_width = img.width*scale;\n    const scaled_height = img.height*scale;\n    const dx = (28 - scaled_width)/2;\n    const dy = (28 - scaled_height)/2;\n    cctx.drawImage(img, dx, dy, scaled_width, scaled_height);\n\n\n    // Turn into 2D array of 28x28\n    const image_array = Array(28);\n    var column_count = 0\n    var row_count = 0\n    var column_array = Array(28);\n\n    // invert colors, make black and white and remove alpha\n    var imgData = cctx.getImageData(0, 0, canvas.width, canvas.height);\n    var i;\n    for (i = 0; i < imgData.data.length; i += 4) {\n\n      // Fill array\n      if (column_count >= 28){\n        column_count = 0;\n        image_array[row_count] = column_array;\n        // Reset column_array\n        column_array = Array(28);\n        row_count++;\n      }\n\n      if (imgData.data[i + 3] > 0){\n        // Used to visualize image for debugging, can be discarded\n        imgData.data[i] = 255;\n        imgData.data[i+1] = 255;\n        imgData.data[i+2] = 255;\n        // Convert to either 0 or 1\n        column_array[column_count] = 1;\n      } else {\n        // Used to visualize image for debugging, can be discarded\n        imgData.data[i] = 0;\n        imgData.data[i+1] = 0;\n        imgData.data[i+2] = 0;\n        // Convert to either 0 or 1\n        column_array[column_count] = 0;\n      }\n      imgData.data[i + 3] = 255;\n      column_count++;\n    }\n\n    // Lazy add final row empty\n    var final_row = Array(28);\n    for (var i =0; i< final_row.length; i++){\n      final_row[i] = 0;\n    }\n    image_array[27] = final_row;\n    cctx.putImageData(imgData, 0, 0);\n    let newImage = canvas;\n    return [newImage, image_array];\n  }\n\n  const result_graph = (resultArray) => {\n    return(\n      <ResultGraph result={resultArray}/>\n    )\n  }\n\n  return(\n    <div>\n      <SignatureCanvas\n            ref = {sigCanvas}\n            penColor='black'\n            velocityFilterWeight='0'\n            maxWidth= {brushSize}\n            dotSize='0'\n            canvasProps={{\n              width: canvasWidth,\n              height: canvasWidth,\n              className: 'signatureCanvas'\n            }} />\n      <div className=\"button-wrapper\">\n        <Button className=\"button\" onClick={clearPad} isClear=\"true\">clear</Button>\n        <Button className=\"button\" onClick={submitPad}>submit</Button>\n      </div>\n      {resultArray ? (<div>{result_graph(resultArray)}</div>\n      ) : null}\n      {imageURL ? (\n        <>\n          <p>Processed Digit</p>\n          <img\n            src={imageURL}\n            alt=\"my signature\"\n            style={{\n              display: \"block\",\n              margin: \"0 auto\",\n              border: \"1px solid black\",\n              width: \"150px\"\n            }}\n          />\n        </>\n      ) : null}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}