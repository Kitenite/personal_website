{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/kietho/Repos/stuffbykiet.com/pages/projects/DrawingCanvas.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport SignatureCanvas from 'react-signature-canvas';\nimport ImageProcessor from './ImageProcessor';\nexport default function DrawingCanvas() {\n  // useStates\n  var sigCanvas = useRef({});\n\n  var _useState = useState(null),\n      imageURL = _useState[0],\n      setImageURL = _useState[1];\n\n  var _useState2 = useState(null),\n      resultArray = _useState2[0],\n      setResultArray = _useState2[1]; // Canvas Configuration\n\n\n  var canvasWidth = Math.min(vh, vw) / 2;\n  var brushSize = (canvasWidth / 30).toString(10); // Functions\n\n  var clearPad = function clearPad() {\n    sigCanvas.current.clear();\n    setImageURL(null);\n    setResultArray(null);\n  };\n\n  var submitPad = function submitPad() {\n    var submittedImage = sigCanvas.current.getTrimmedCanvas();\n    var result = ImageProcessor(submittedImage);\n    apiCall(result[1]);\n    setImageURL(result[0].toDataURL(\"image/png\"));\n  }; // Query our AI model\n\n\n  var apiCall = function apiCall(image_array) {\n    var model_url = 'http://54.197.197.40/v1/models/digit_model:predict';\n    var xhr = new XMLHttpRequest(); // get a callback when the server responds\n\n    xhr.addEventListener('load', function () {\n      // Get results and process\n      var reponse = JSON.parse(xhr.responseText);\n      processResult(reponse);\n    });\n    xhr.open('POST', model_url);\n    xhr.send(_JSON$stringify({\n      \"instances\": image_array\n    }));\n  };\n\n  var processResult = function processResult(reponse) {\n    var unsorted_array = reponse[\"predictions\"][0];\n    var sorted_array = Array(unsorted_array.length); // Get all results above 0.00%\n\n    for (var i = 0; i < unsorted_array.length; i++) {\n      var index = unsorted_array.indexOf(Math.max.apply(Math, _toConsumableArray(unsorted_array)));\n      var confidence = (unsorted_array[index] * 100).toFixed(2);\n\n      if (confidence > 0) {\n        sorted_array[i] = [index, confidence];\n        unsorted_array[index] = 0;\n      }\n    }\n\n    setResultArray(sorted_array);\n  };\n\n  var result_graph = function result_graph(resultArray) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, resultArray.map(function (result, index) {\n      return __jsx(\"p\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Number: \", result[0], \" \", __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), \"Confidence: \", result[1], \"%\");\n    }));\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(SignatureCanvas, {\n    ref: sigCanvas,\n    penColor: \"black\",\n    velocityFilterWeight: \"0\",\n    maxWidth: brushSize,\n    dotSize: \"0\",\n    canvasProps: {\n      width: canvasWidth,\n      height: canvasWidth,\n      className: 'signatureCanvas'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"button-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    className: \"button\",\n    onClick: clearPad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"clear\"), __jsx(\"button\", {\n    className: \"button\",\n    onClick: submitPad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"submit\")), resultArray ? __jsx(React.Fragment, null, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Your result: \"), __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, result_graph(resultArray))) : null, imageURL ? __jsx(React.Fragment, null, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Processed Digit\"), __jsx(\"img\", {\n    src: imageURL,\n    alt: \"my signature\",\n    style: {\n      display: \"block\",\n      margin: \"0 auto\",\n      border: \"1px solid black\",\n      width: \"150px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })) : null);\n}","map":{"version":3,"sources":["/Users/kietho/Repos/stuffbykiet.com/pages/projects/DrawingCanvas.js"],"names":["React","useState","useRef","SignatureCanvas","ImageProcessor","DrawingCanvas","sigCanvas","imageURL","setImageURL","resultArray","setResultArray","canvasWidth","Math","min","vh","vw","brushSize","toString","clearPad","current","clear","submitPad","submittedImage","getTrimmedCanvas","result","apiCall","toDataURL","image_array","model_url","xhr","XMLHttpRequest","addEventListener","reponse","JSON","parse","responseText","processResult","open","send","unsorted_array","sorted_array","Array","length","i","index","indexOf","max","confidence","toFixed","result_graph","map","width","height","className","display","margin","border"],"mappings":"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","sourcesContent":["import React, {useState, useRef} from 'react';\nimport SignatureCanvas from 'react-signature-canvas'\nimport ImageProcessor from './ImageProcessor'\n\n\nexport default function DrawingCanvas(){\n  // useStates\n  const sigCanvas = useRef({});\n  const [imageURL, setImageURL] = useState(null);\n  const [resultArray, setResultArray] = useState(null);\n\n  // Canvas Configuration\n  const canvasWidth =  Math.min(vh, vw)/2;\n  const brushSize = (canvasWidth/30).toString(10);\n\n  // Functions\n  const clearPad = () => {\n    sigCanvas.current.clear();\n    setImageURL(null);\n    setResultArray(null);\n  };\n  const submitPad = () => {\n    let submittedImage = sigCanvas.current.getTrimmedCanvas();\n    let result = ImageProcessor(submittedImage)\n    apiCall(result[1]);\n    setImageURL(result[0].toDataURL(\"image/png\"));\n  };\n\n  // Query our AI model\n  const apiCall = (image_array) => {\n    const model_url = 'http://54.197.197.40/v1/models/digit_model:predict';\n    var xhr = new XMLHttpRequest();\n    // get a callback when the server responds\n    xhr.addEventListener('load', () => {\n      // Get results and process\n      let reponse = JSON.parse(xhr.responseText);\n      processResult(reponse)\n    });\n    xhr.open('POST', model_url);\n    xhr.send(JSON.stringify({ \"instances\": image_array }));\n  }\n\n  const processResult = (reponse) => {\n    let unsorted_array = reponse[\"predictions\"][0];\n    let sorted_array = Array(unsorted_array.length);\n    // Get all results above 0.00%\n    for (var i = 0; i< unsorted_array.length; i++){\n      let index = unsorted_array.indexOf(Math.max(...unsorted_array));\n      let confidence = (unsorted_array[index]*100).toFixed(2)\n      if (confidence > 0){\n        sorted_array[i] = [index, confidence];\n        unsorted_array[index] = 0;\n      }\n    }\n    setResultArray(sorted_array);\n  }\n\n  const result_graph = (resultArray) => {\n    return(<div>\n      {resultArray.map((result, index) => (\n        <p key={index}>Number: {result[0]} <br/>Confidence: {result[1]}%</p>\n    ))}\n    </div>\n    )\n  }\n\n  return(\n    <div>\n      <SignatureCanvas\n            ref = {sigCanvas}\n            penColor='black'\n            velocityFilterWeight='0'\n            maxWidth= {brushSize}\n            dotSize='0'\n            canvasProps={{\n              width: canvasWidth,\n              height: canvasWidth,\n              className: 'signatureCanvas'\n            }} />\n      <div className=\"button-wrapper\">\n        <button className=\"button\" onClick={clearPad}>clear</button>\n        <button className=\"button\" onClick={submitPad}>submit</button>\n      </div>\n      {resultArray ? (\n        <>\n          <a>Your result: </a>\n          <a>{result_graph(resultArray)}</a>\n        </>\n      ) : null}\n\n      {imageURL ? (\n        <>\n          <a>Processed Digit</a>\n          <img\n            src={imageURL}\n            alt=\"my signature\"\n            style={{\n              display: \"block\",\n              margin: \"0 auto\",\n              border: \"1px solid black\",\n              width: \"150px\"\n            }}\n          />\n        </>\n      ) : null}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}