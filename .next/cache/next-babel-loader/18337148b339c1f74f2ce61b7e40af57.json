{"ast":null,"code":"import { useState } from 'react';\nexport default function ImageProcessor(img) {\n  // Scale image\n  const scale = Math.min(20 / img.width, 20 / img.height);\n  const {\n    0: canvas,\n    1: setCanvas\n  } = useState(null);\n\n  if (false) {\n    setCanvas(document.createElement('canvas'));\n  }\n\n  canvas.width = 28;\n  canvas.height = 28;\n  const cctx = canvas.getContext('2d');\n  cctx.imageSmoothingEnabled = true;\n  const scaled_width = img.width * scale;\n  const scaled_height = img.height * scale;\n  const dx = (28 - scaled_width) / 2;\n  const dy = (28 - scaled_height) / 2;\n  cctx.drawImage(img, dx, dy, scaled_width, scaled_height); // Turn into 2D array of 28x28\n\n  const image_array = Array(28);\n  var column_count = 0;\n  var row_count = 0;\n  var column_array = Array(28); // invert colors, make black and white and remove alpha\n\n  var imgData = cctx.getImageData(0, 0, canvas.width, canvas.height);\n  var i;\n\n  for (i = 0; i < imgData.data.length; i += 4) {\n    // Fill array\n    if (column_count >= 28) {\n      column_count = 0;\n      image_array[row_count] = column_array; // Reset column_array\n\n      column_array = Array(28);\n      row_count++;\n    }\n\n    if (imgData.data[i + 3] > 0) {\n      // Used to visualize image for debugging, can be discarded\n      imgData.data[i] = 255;\n      imgData.data[i + 1] = 255;\n      imgData.data[i + 2] = 255; // Convert to either 0 or 1\n\n      column_array[column_count] = 1;\n    } else {\n      // Used to visualize image for debugging, can be discarded\n      imgData.data[i] = 0;\n      imgData.data[i + 1] = 0;\n      imgData.data[i + 2] = 0; // Convert to either 0 or 1\n\n      column_array[column_count] = 0;\n    }\n\n    imgData.data[i + 3] = 255;\n    column_count++;\n  } // Lazy add final row empty\n\n\n  var final_row = Array(28);\n\n  for (var i = 0; i < final_row.length; i++) {\n    final_row[i] = 0;\n  }\n\n  image_array[27] = final_row; // Print out array\n  // console.log(image_array);\n\n  cctx.putImageData(imgData, 0, 0);\n  let newImage = canvas;\n  return [newImage, image_array];\n}","map":{"version":3,"sources":["/Users/kietho/Repos/stuffbykiet.com/pages/projects/components/ImageProcessor.js"],"names":["useState","ImageProcessor","img","scale","Math","min","width","height","canvas","setCanvas","document","createElement","cctx","getContext","imageSmoothingEnabled","scaled_width","scaled_height","dx","dy","drawImage","image_array","Array","column_count","row_count","column_array","imgData","getImageData","i","data","length","final_row","putImageData","newImage"],"mappings":"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","sourcesContent":["import {useState} from 'react';\n\nexport default function ImageProcessor(img) {\n  // Scale image\n  const scale = Math.min(20/img.width, 20/img.height);\n  const [canvas, setCanvas] = useState(null)\n\n  if (process.browser) {\n    setCanvas(document.createElement('canvas'))\n  }\n\n  canvas.width = 28;\n  canvas.height = 28;\n  const cctx = canvas.getContext('2d');\n  cctx.imageSmoothingEnabled = true;\n  const scaled_width = img.width*scale;\n  const scaled_height = img.height*scale;\n  const dx = (28 - scaled_width)/2;\n  const dy = (28 - scaled_height)/2;\n  cctx.drawImage(img, dx, dy, scaled_width, scaled_height);\n\n\n  // Turn into 2D array of 28x28\n  const image_array = Array(28);\n  var column_count = 0\n  var row_count = 0\n  var column_array = Array(28);\n\n  // invert colors, make black and white and remove alpha\n  var imgData = cctx.getImageData(0, 0, canvas.width, canvas.height);\n  var i;\n  for (i = 0; i < imgData.data.length; i += 4) {\n\n    // Fill array\n    if (column_count >= 28){\n      column_count = 0;\n      image_array[row_count] = column_array;\n      // Reset column_array\n      column_array = Array(28);\n      row_count++;\n    }\n\n    if (imgData.data[i + 3] > 0){\n      // Used to visualize image for debugging, can be discarded\n      imgData.data[i] = 255;\n      imgData.data[i+1] = 255;\n      imgData.data[i+2] = 255;\n      // Convert to either 0 or 1\n      column_array[column_count] = 1;\n    } else {\n      // Used to visualize image for debugging, can be discarded\n      imgData.data[i] = 0;\n      imgData.data[i+1] = 0;\n      imgData.data[i+2] = 0;\n      // Convert to either 0 or 1\n      column_array[column_count] = 0;\n    }\n    imgData.data[i + 3] = 255;\n    column_count++;\n  }\n\n  // Lazy add final row empty\n  var final_row = Array(28);\n  for (var i =0; i< final_row.length; i++){\n    final_row[i] = 0;\n  }\n  image_array[27] = final_row;\n\n  // Print out array\n  // console.log(image_array);\n\n  cctx.putImageData(imgData, 0, 0);\n  let newImage = canvas;\n  return [newImage, image_array];\n}\n"]},"metadata":{},"sourceType":"module"}